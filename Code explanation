 এই প্রোগ্রামটি বিভিন্ন CPU শিডিউলিং অ্যালগরিদম যেমন FCFS (First Come First Serve), Non-Preemptive SJF (Shortest Job First), Preemptive SJF, Non-Preemptive Priority, Preemptive Priority, Round Robin, এবং একটি নতুন অ্যালগরিদম `Own_algo` (যা Non-Preemptive Priority এবং Non-Preemptive SJF-কে একত্রিত করে) বাস্তবায়ন করেছে। প্রোগ্রামটি বিভিন্ন অ্যালগরিদমের মাধ্যমে প্রসেসের শিডিউলিং সম্পন্ন করে এবং গ্যান্ট চার্ট, প্রোসেসের ডিটেইলস এবং গড় সময় সম্পর্কিত তথ্য প্রদর্শন করে।

এখানে প্রতিটি ফাংশনের কাজ ব্যাখ্যা করছি:

### 1. **`displayGanttChart` ফাংশন**

এই ফাংশনটি গ্যান্ট চার্ট প্রদর্শন করে, যা প্রতিটি প্রসেসের কর্মসম্পাদন সময় দেখায়। এটি `ganttChart` এর মধ্যে প্রসেসের আইডি এবং সময়ের জোড়া নিয়ে কাজ করে এবং প্রতিটি প্রসেসের জন্য সময়ের পরিসীমা প্রদর্শন করে।

### 2. **`displayProcessDetails` ফাংশন**

এই ফাংশনটি প্রসেসের সব বিস্তারিত তথ্য প্রদর্শন করে, যেমন:

* Process ID
* Burst Time
* Arrival Time
* Response Time
* Waiting Time
* Turnaround Time
* Completion Time

এটি একটি সুশৃঙ্খল টেবিলের মাধ্যমে তথ্য প্রদর্শন করে।

### 3. **`displayAverageMetrics` ফাংশন**

এই ফাংশনটি সমস্ত প্রসেসের গড় Response Time, Waiting Time এবং Turnaround Time হিসাব করে এবং সেগুলি প্রদর্শন করে।

### 4. **`getProcessInput` ফাংশন**

এটি ব্যবহারকারীর কাছ থেকে প্রসেসের ইনপুট নেয়। এখানে প্রক্রিয়াগুলির:

* Burst Time (CPU সময়)
* Arrival Time (প্রসেসের আগমন সময়)
* Priority (প্রয়োজনীয় হলে)

### 5. **FCFS (First Come First Serve) ফাংশন**

এই ফাংশনটি FCFS শিডিউলিং অ্যালগরিদম অনুযায়ী কাজ করে। FCFS এর মধ্যে, প্রসেসগুলিকে তাদের আগমনের সময় অনুসারে সাজানো হয় এবং প্রথমে আসা প্রসেস প্রথমে চলবে। প্রতিটি প্রসেসের জন্য Response Time, Waiting Time, এবং Turnaround Time হিসাব করা হয় এবং গ্যান্ট চার্টের মাধ্যমে প্রদর্শন করা হয়।

### 6. **Non-Preemptive SJF (Shortest Job First) ফাংশন**

এটি Non-Preemptive SJF অ্যালগরিদমের বাস্তবায়ন। এখানে সর্বোচ্চ Prioritized (অথবা কম Burst Time) প্রসেসকে আগে চালানো হয়, তবে একবার একটি প্রসেস শুরু হলে, তা শেষ না হওয়া পর্যন্ত অন্য প্রসেস চলবে না। গ্যান্ট চার্ট এবং অন্যান্য হিসাব করা হয়।

### 7. **Preemptive SJF (Shortest Job First) ফাংশন**

এটি Preemptive SJF শিডিউলিং ব্যবহৃত প্রোগ্রাম। এখানে Shortest Remaining Burst Time (SRBT) অনুসারে প্রসেসগুলি সঞ্চালিত হয় এবং চলতে থাকা প্রসেসের Burst Time কম থাকলে তাকে প্রাথমিক ভাবে প্রাধান্য দেওয়া হয়।

### 8. **Non-Preemptive Priority ফাংশন**

এটি Non-Preemptive Priority Scheduling অ্যালগরিদম। এই অ্যালগরিদমে প্রসেসগুলিকে প্রাধান্য (Priority) অনুযায়ী শিডিউল করা হয়। প্রথমে যেই প্রসেসের priority বেশি (নিচে priority মান বেশি) তাকে আগে চালানো হয়।

### 9. **Preemptive Priority Scheduling ফাংশন**

এটি Preemptive Priority Scheduling অ্যালগরিদমের বাস্তবায়ন। এর মধ্যে, যখনই একটি বেশি Priority এর প্রসেস আসে, তখন চলমান প্রসেসটি বিরতী নেয় এবং প্রাধান্য পাওয়া প্রসেস প্রথমে চালানো হয়।

### 10. **Round Robin Scheduling ফাংশন**

এই ফাংশনটি Round Robin অ্যালগরিদম অনুসরণ করে, যেখানে প্রতিটি প্রসেস একটি নির্দিষ্ট সময় (time quantum) পর্যন্ত চালানো হয়। যদি প্রসেসটি শেষ না হয় তবে সেটি আবার ready queue তে ফিরে আসে।

### 11. **Own\_algo ফাংশন**

এই অ্যালগরিদমটি Non-Preemptive Priority এবং Non-Preemptive SJF অ্যালগরিদমের একটি সংমিশ্রণ। এখানে Priority এবং Burst Time-এ ভিত্তি করে প্রসেস শিডিউল করা হয়, আগে প্রাধান্য দেওয়া হয় এবং তারপরে শোর্টেস্ট বুস্ট টাইম প্রসেস নির্বাচন করা হয়।

### 12. **`compareAllAlgorithms` ফাংশন**

এই ফাংশনটি সব শিডিউলিং অ্যালগরিদম একসাথে চালায় এবং তাদের গড় Response Time, Waiting Time এবং Turnaround Time তুলনা করে।

### **Main Function**:

এখানে ব্যবহারকারী বিভিন্ন CPU শিডিউলিং অ্যালগরিদম বেছে নিতে পারে এবং তা চালানোর পরে প্রসেসের ডিটেইলস এবং গড় সময় সম্পর্কে তথ্য দেখতে পারে।

---

এই ফাংশনগুলো সম্মিলিতভাবে CPU শিডিউলিং অ্যালগরিদমের কাজ এবং প্রক্রিয়া বিশ্লেষণ করতে সাহায্য করে।
